<?php
/**
 * GetLabelListRequestData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eBay国际物流平台商户接口
 *
 * eBay国际物流平台商户接口
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GetLabelListRequestData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetLabelListRequestData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetLabelListRequestData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'page_size' => 'string',
        'print_preference' => 'string',
        'tracking_number_list' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'page_size' => null,
        'print_preference' => null,
        'tracking_number_list' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'page_size' => 'pageSize',
        'print_preference' => 'printPreference',
        'tracking_number_list' => 'trackingNumberList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'page_size' => 'setPageSize',
        'print_preference' => 'setPrintPreference',
        'tracking_number_list' => 'setTrackingNumberList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'page_size' => 'getPageSize',
        'print_preference' => 'getPrintPreference',
        'tracking_number_list' => 'getTrackingNumberList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const A4 = '0';
    const THERMAL_PAPER = '1';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPageSizeAllowableValues()
    {
        return [
            self::A4,
            self::THERMAL_PAPER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['page_size'] = isset($data['page_size']) ? $data['page_size'] : null;
        $this->container['print_preference'] = isset($data['print_preference']) ? $data['print_preference'] : null;
        $this->container['tracking_number_list'] = isset($data['tracking_number_list']) ? $data['tracking_number_list'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['page_size'] === null) {
            $invalidProperties[] = "'page_size' can't be null";
        }
        $allowedValues = $this->getPageSizeAllowableValues();
        if (!in_array($this->container['page_size'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'page_size', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['tracking_number_list'] === null) {
            $invalidProperties[] = "'tracking_number_list' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['page_size'] === null) {
            return false;
        }
        $allowedValues = $this->getPageSizeAllowableValues();
        if (!in_array($this->container['page_size'], $allowedValues)) {
            return false;
        }
        if ($this->container['tracking_number_list'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets page_size
     *
     * @return string
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param string $page_size 标签格式，枚举类型，可用值： A4 - 适用于打印A4格式标签，THERMAL_PAPER - 适用于打印4寸的热敏标签纸格式标签
     *
     * @return $this
     */
    public function setPageSize($page_size)
    {
        $allowedValues = $this->getPageSizeAllowableValues();
        if (!in_array($page_size, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'page_size', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets print_preference
     *
     * @return string
     */
    public function getPrintPreference()
    {
        return $this->container['print_preference'];
    }

    /**
     * Sets print_preference
     *
     * @param string $print_preference 需要打印的字段，为空时按打印偏好打印，否则按所选择需要打印的字段使用逗号拼接字符串，如：（nameZh,nameEn,property,remark）
     *
     * @return $this
     */
    public function setPrintPreference($print_preference)
    {
        $this->container['print_preference'] = $print_preference;

        return $this;
    }

    /**
     * Gets tracking_number_list
     *
     * @return string[]
     */
    public function getTrackingNumberList()
    {
        return $this->container['tracking_number_list'];
    }

    /**
     * Sets tracking_number_list
     *
     * @param string[] $tracking_number_list 包裹跟踪号列表
     *
     * @return $this
     */
    public function setTrackingNumberList($tracking_number_list)
    {
        $this->container['tracking_number_list'] = $tracking_number_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


